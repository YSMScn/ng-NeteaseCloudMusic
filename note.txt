2-1:
*Install cnpm using:npm install cnpm -g --registry=https://registry.npm.taobao.org
*Set defalut npm address to cnpm: npm config set registry https://registry.npm.taobao.org
*npm install -g @angular/cli
*Using cnpm install -g @angular/cli if you are in China and didn't set npm address to https://registry.npm.taobao.org
*Create angular project using: ng new ng-NeteaseCloudMusic --style==less --routing -s --skip-install
*Don't need to add --skip-install, but it could take more time if you are in China, use cnpm install afterwards.
*Using: npm install or cnpm install if you used --skip-install
*Using Visual Studio Code to open this project folder
*Use ng add ng-zorro-antd to install ng-zorro
*Create new folder styles in src/assets/ and copy styles.less into this folder. rename it to index.less
*Edit angular.json. Change root:"styles" to src/assets/styles/index.less, also test:"styles" to src/assets/styless/index.less
*Copy .less file from source code into assets folder
*Add h1 and button(<button nz-button nzType="primary">button</button>) to test

2-2:
*Create module core using: ng g m core
*Core module is used to help app.module, we can import other modules in core module
*Import core module in app.module.ts
*Move (CommonModule,BrowserModule,AppRoutingModule,HttpClientModule,BrowserAnimationsModule) into core module
*(NgZorroAntdModule,FormsModule) will be put into a shared module, because these two modules are used globally
*Create module share using: ng g m share
*Move (NgZorroAntdModule,FormsModule) into share module, add exports for other modules to use these two modules
*Create module pages using:ng g m pages, pages module is used for manage all page modules
*import share module into pages module
*Create services module using: ng g services, this module is used for http services. Import this module in core module
*Import new modules into core module, move AppRoutingModule to the end, otherwise it make cause error when setting routing;
*We can move registerLocaleData to core module, don't forget to import(2 lines)
*Edit core module
*Dont' forget to exports shareModule in core module, otherwise app module can't access NgZorroAntdModule(in share module),the button element won't have style on it
*Aslo AppRoutingModule! After exports these two module, the button element has style on it now.
*We can move provider into core module aswell

3-1:
*Edit app.component.html, create header and footer
*alt+shift+down to copy current line to next line
*Create new module home using: ng g m pages/home -routing
*Edit home routing Routes = [{path:'home',component: HomeComponent,data:{title:"Find"}}];
*Edit app-routing Routes = [{path:'',redirectTo:'/home',pathMatch:'full'}]; redirct to home routing when path is empty

3-2:
*Clone NeteaseCloudMusicApi and install using:npm i; run this using: node app.js
*Create home services in folder services using:ng g s services/home
*Edit home services, write method getBanners(), need to import HttpClient and map
*Exports API_CONFIG in services.module, inject it in home.service's constructor
*Inject home.service in home.component.ts constructor
*Call getBanners() in HomeComponent to test.

3-3:
*Edit home.component.html, added <nz-carousel nzAutoPlay="true" nzEffect="fade">
*Make sure home.module import NgZorroAntdModule and CommonModule

3-4:
*Create wy-carousel component under home component
*Edit wy-carousel.component.html and home.component.html
*Copy banner.png and wy-carousel.component.less
*Use [nzDotRender] and ng-template to set style(dot) for carousel
*Bind click event with right and left icon
*Bind (click)="onChangeSlide('pre')" and ('next') for right and left icon. Create output event with parameter pre or next. Bind this event in home.component with new method to run function nzCarouselComponent[diretction]()
*In wy-carousel.component.ts, we can change the type of EventEmitter from string to 'pre' | 'next'. Now, the function nzCarouselComponent[diretction]() will only have pre and next two options.
*In home.component.ts, set changeDetection: ChangeDetectionStrategy.OnPush. 3-4 22:00 //There is not this line in source code, but mentioned in video

3-5:
*Get hot tags and personal list. Similar with get banner, create and export data type, write a method to use http.get to get HotTag/PersonalList[].
*Create wy-ui module for ui component, then create song-list.component.
*Edit song-list.component and bind with songlist item in home.component.html
*Create a pipe using:ng g p share/play-count; Edit it to show play count in new style
*Import and export pipe

3-6:
*Similar with 3-5, create singer service, singer type in commen type and song-list component; Write code to get json data from Api and bind them in home.component.html
*Create member-card.component and use it in home.component.html

3-7:
*Using provider to pervent data lost or empty component while page loading and get data from API. E.g. At the first time of loading a page, there could be a delay when the web asking API to return datas. At this condition, the component that didn't recived data from API may be empty
*Create home-resolve.services and copy source code from angular api, edit it to return test to see how it works
*Add provider in home-routing.modules and resolve:{homeDatas:HomeResolverService} in Route
*Add private route: ActivatedRoute into home-components' constructor, use pipe(map()).subscribe and console.log to test if this resolve worked.
*Create HomeDataType, inject homeService and singerService in home-resolve.service's constructor.
*Use forkJoin to create a observable<HomeDataType> and return it.
*Rewrite home.component.ts, all codes in annotation were old without resolve.

4-1:
*Fill wy-player.component.html

4-2:
*Create song-list service and add new type to commen type(song and singer)
*Song-list service is similar with singer service and home service, use http.get to get data from api.
*Import and bind songListserve in HomeComponent
*Warning: import EventEmitter from angular/core not protractor
*https://www.jianshu.com/p/7c7b25adf636

4-3:
*Because we can't get url for music use one Api, we need to use playlist/detail to get id for each song, then we use song/url to get the url for musci to play.
*Create song service and add method:getSongUrl(),getSongList(),generateSongList()
*Add playList() method in song-list.service
*17:00

4-4:
*Rewrite getSongList method in song.service, make it shorter and better
*Create wy-slider module and component, write the dom
*Create wy-slider-track component and app-wy-slider-handle component for the track and handle part
*Because the doms in these two components are very short, we can rewrite templateUrl to template and add dom rather than html file
*Delete useless file and move these two components into folder wy-slider
*Add encapsulation: ViewEncapsulation.None to set style for <app-wy-slider-track> and <app-wy-slider-handle>, otherwise the styles in less stylesheet won't work for these two components

4-5:
*For track and handle's movenment: Horizontal, track: width, handle: left; Vertical, track: height, handle: bottom
*Implement onChange interface and wrtie the code to detect changes of track and handle
*Create wy-slider-style.ts
*Set changeDetection:ChangeDetectionStrategy.OnPush

4-6:
*constructor(private el:ElementRef) { }

  ngOnInit(): void {
    console.log('el: ', this.el.nativeElement);
  }
  One way to get dom from html, but we use a different way to do this
  @ViewChild("wySlider",{static:true}) private wySlider:ElementRef;
*Events that are needed to bind for wy-slider:
 PC:
    mousedown mousemove mouseup
 Phone:
    touchstart touchmove touchend

4-7:
*16:00 write getElementOffset method in wy-slider-helper.ts(Used the method with same name from ng-zorro-antd)
*29:30 create limitNumberInRangg in new file number.ts(Not done yet)


4-8:
*4:50 write slidervalue type in wy-slider-type.ts(Imported from ng-zorro-antd)
*Use ChangeDetectorRef.markForCheck() to check if the track or handle moved;

4-9 4-10:
*Need to watch again

4-11:
*NGRX--state management
*ng add @ngrx/store and ng add @ngrx/store-devtools to install ngrx
*create module store and rename to index.ts(AppStoreModule)
*Create 3 folders(reducers,actions,selectors) inside store module
*Create player.action.ts and player.reducer.ts and edit them
*State management in Web Frontend:https://www.jianshu.com/p/f5dc75902a5e
*   on(SetPlaying,(state,{playing})=>({...state,playing})),
    on(SetPlayList,(state,{list})=>({...state,playList:list})),
    on(SetPlayMode,(state,{mode})=>({...state,playMode:mode})),
    on(SetSongList,(state,{songList})=>({...state,songList})),
    on(SetCurrentIndex,(state,{index})=>({...state,currentIndex:index})),
    export const SetPlaying = createAction('[player] Set playing',props<{playing:boolean}>()) ;
    export const SetPlayList = createAction('[player] Set playList',props<{list:Song[]}>()) ;
    export const SetPlayMode = createAction('[player] Set playMode',props<{mode:PlayMode}>()) ;
    export const SetSongList = createAction('[player] Set songList',props<{songList:Song[]}>()) ;
    export const SetCurrentIndex = createAction('[player] Set currentIndex',props<{index:number}>()) ;
*29:20 changed to:
    on(SetPlaying,(state,{playing})=>({...state,playing})),
    on(SetPlayList,(state,{playList})=>({...state,playList})),
    on(SetPlayMode,(state,{playMode})=>({...state,playMode})),
    on(SetSongList,(state,{songList})=>({...state,songList})),
    on(SetCurrentIndex,(state,{currentIndex})=>({...state,currentIndex})),
*Create player.selector.ts
*Need to instal redux in browser to use devtools

4-12:
*7:33 Add export const getPlayer = createFeatureSelector<AppStoreModule>('player'); in player.selector
  Add const appStore$ = this.store$.pipe(select(getPlayer));  in wy-components
  The error was caused by different ngrx version
*12:00     stateArr.forEach(item=>{
      appStore$.pipe(select(item.type)).subscribe(item.cb);
    })
    this way has error with item.type, checked with the source code, used another way to do this
*html audio element <audio src=""></audio>, add (canplay)="onCanplay()"


4-15:
*6:00
*Have problem when <app-wy-slider [bufferOffset]= "bufferOffset1" [(ngModel)]="sliderValue" (ngModelChange)="onPercentChange($event)"> is changed to
                   <app-wy-slider [bufferOffset]= "bufferOffset1" [(ngModel)]="sliderValue" (wyOnAfterChange)="onPercentChange($event)">
*Keep it in <app-wy-slider [bufferOffset]= "bufferOffset1" [(ngModel)]="sliderValue" (ngModelChange)="onPercentChange($event)"> first
*change to wyOnAfterChange will cause "double click" on toggle and first time click on slider won't change currentTime
*Add this line //this.percent=(this.currentTime/this.duration)*100; handle won't move when is clicked(move to position and back to 0), currentTime will change
*Found the reson and changed different codes, the line that cause error is marked with ***:
  different codes:
  styleUrls: ['./wy-slider.component.less'],
  private dragStart_: Subscription | null;
  private dragMove_: Subscription | null;
  private dragEnd_: Subscription | null;
  private subscribeDrag(events: string[] = ['start', 'move', 'end']) {
    if (events.indexOf('start') !== -1&& this.dragStart$ && !this.dragStart_) {
      this.dragStart_ = this.dragStart$.subscribe(this.onDragStart.bind(this));
    }
    if (events.indexOf('move') !== -1&& this.dragMove$ && !this.dragMove_) {
      this.dragMove_ = this.dragMove$.subscribe(this.onDragMove.bind(this));
    }
    if (events.indexOf('end') !== -1&& this.dragEnd$ && !this.dragEnd_) {
      this.dragEnd_ = this.dragEnd$.subscribe(this.onDragEnd.bind(this));
    }
  }
  private unsubscribeDrag(events: string[] = ['start', 'move', 'end']) {
    if (events.indexOf('start') !== -1&& this.dragStart_) {
      this.dragStart_.unsubscribe();
      this.dragStart_ = null;
    }
    if (events.indexOf('move') !== -1&& this.dragMove_) {
      this.dragMove_.unsubscribe();
      this.dragMove_ = null;
    }
    if (events.indexOf('end') !== -1&& this.dragEnd_) {
      this.dragEnd_.unsubscribe();
      this.dragEnd_ = null;
    }
  }
    private setValue(value: SliderValue, needCheck = false) {
//////////////////////////////////////////
  private formatValue(value: SliderValue): SliderValue {
    let res = value;
****if (this.assertValueValid(value)) {
      res = this.wyMin;
    } else {
      res = limitNumberInRange(value, this.wyMin, this.wyMax);
    }
    return res;
  }

5-1:
*9:00

5-2:
*Install betterScroll
*21:00
*wy-player-panel.component.html line 20: <ul class="list-wrap"> vs <ul>,scroll works and doesn't work
*it only show 12 songs
*Solved: remove class="list-wrap" will show all songs in the playList, didn't added a single dot in: styles: ['.wy-scroll{width:100%;height:100%; overflow:hidden;}']

5-3:
*8:48 write in this way:this.store$.pipe(select(getPlayer)).subscribe(res=>this.playerState = res) not this.store$.pipe(select('player')).subscribe(res=>this.playerState = res)

5-5:
*used timer() replace setTimeout();
*tried 3 ways:
  this.win.setTimeout(()=>{
          if(this.currentSong){
            this.scrollToCurrent(0);
          }
        },80)

  timer(80).subscribe(()=>{
   if(this.currentSong){
    this.scrollToCurrent(0);
    }});

  setTimeout(()=>{
          if(this.currentSong){
            this.scrollToCurrent(0);
          }
        },80)

5-9:
*Error with currentNum when change songs
*use resetLyric() method
*Need to rewatch.

5-12:
*setTimeout to timer$:Subscription

6-4:
*res: undefined
*Solved:double checked the route variable in sheet-info-routing.module.ts
*29:00 two ways:[innerHTML]="description.long"
                 {{description.long}}
*use the innerHTML way, because <br> needed in html for the description

7-1:
*If we import ShareModule in wy-search.module.ts, there is a ERROR in Maximum call stack size exceeded
*To solve this problem, don't import shareModule, import NgZorroAntdModule
*Because we don't need everything from NgZorroAntdModule, we can only import NzInputModule and NzIconModule
*Around 14:00, using ng-container and ng-template

7-3:
*Around 10:00 angular matierail overlay

7-4:
*When {blur} is faster than (click), we can use (mousedown).

7-8:
*In the video, he used nz-ToolTip and nz-title, he said the nzTooltipTitle doesn't work because the version of ng-zorro he used
*But the reason for that is because we already bind a click event on this <p> element, and the nz-ToolTip's defalut trigger is 'click'
*If we set nzTooltipTrigger="hover", we can use nzTooltipTitle now.

8-4:
*Clicking login button won't show new panel with error:
*Can't bind to 'ngIf' since it isn't a known property of 'div'.
*Don't forget to import CommonModule!
